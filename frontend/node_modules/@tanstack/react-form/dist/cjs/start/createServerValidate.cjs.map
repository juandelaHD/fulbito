{"version":3,"file":"createServerValidate.cjs","sources":["../../../src/start/createServerValidate.tsx"],"sourcesContent":["import { decode } from 'decode-formdata'\nimport {\n  isGlobalFormValidationError,\n  isStandardSchemaValidator,\n  standardSchemaValidators,\n} from '@tanstack/form-core'\nimport { getHeader } from '@tanstack/react-start/server'\nimport { _tanstackInternalsCookie } from './utils'\nimport { ServerValidateError } from './error'\nimport type {\n  FormAsyncValidateOrFn,\n  FormOptions,\n  FormValidateAsyncFn,\n  FormValidateOrFn,\n  UnwrapFormAsyncValidateOrFn,\n} from '@tanstack/form-core'\nimport type { ServerFormState } from './types'\n\ninterface CreateServerValidateOptions<\n  TFormData,\n  TOnMount extends undefined | FormValidateOrFn<TFormData>,\n  TOnChange extends undefined | FormValidateOrFn<TFormData>,\n  TOnChangeAsync extends undefined | FormAsyncValidateOrFn<TFormData>,\n  TOnBlur extends undefined | FormValidateOrFn<TFormData>,\n  TOnBlurAsync extends undefined | FormAsyncValidateOrFn<TFormData>,\n  TOnSubmit extends undefined | FormValidateOrFn<TFormData>,\n  TOnSubmitAsync extends undefined | FormAsyncValidateOrFn<TFormData>,\n  TOnServer extends undefined | FormAsyncValidateOrFn<TFormData>,\n  TSubmitMeta,\n> extends FormOptions<\n    TFormData,\n    TOnMount,\n    TOnChange,\n    TOnChangeAsync,\n    TOnBlur,\n    TOnBlurAsync,\n    TOnSubmit,\n    TOnSubmitAsync,\n    TOnServer,\n    TSubmitMeta\n  > {\n  onServerValidate: TOnServer\n}\n\nexport const createServerValidate =\n  <\n    TFormData,\n    TOnMount extends undefined | FormValidateOrFn<TFormData>,\n    TOnChange extends undefined | FormValidateOrFn<TFormData>,\n    TOnChangeAsync extends undefined | FormAsyncValidateOrFn<TFormData>,\n    TOnBlur extends undefined | FormValidateOrFn<TFormData>,\n    TOnBlurAsync extends undefined | FormAsyncValidateOrFn<TFormData>,\n    TOnSubmit extends undefined | FormValidateOrFn<TFormData>,\n    TOnSubmitAsync extends undefined | FormAsyncValidateOrFn<TFormData>,\n    TOnServer extends undefined | FormAsyncValidateOrFn<TFormData>,\n    TSubmitMeta,\n  >(\n    defaultOpts: CreateServerValidateOptions<\n      TFormData,\n      TOnMount,\n      TOnChange,\n      TOnChangeAsync,\n      TOnBlur,\n      TOnBlurAsync,\n      TOnSubmit,\n      TOnSubmitAsync,\n      TOnServer,\n      TSubmitMeta\n    >,\n  ) =>\n  async (formData: FormData, info?: Parameters<typeof decode>[1]) => {\n    const { onServerValidate } = defaultOpts\n\n    const runValidator = async ({\n      value,\n      validationSource,\n    }: {\n      value: TFormData\n      validationSource: 'form'\n    }) => {\n      if (isStandardSchemaValidator(onServerValidate)) {\n        return await standardSchemaValidators.validateAsync(\n          { value, validationSource },\n          onServerValidate,\n        )\n      }\n      return (onServerValidate as FormValidateAsyncFn<TFormData>)({\n        value,\n        signal: undefined as never,\n        formApi: undefined as never,\n      })\n    }\n\n    const referer = getHeader('referer')!\n\n    const data = decode(formData, info) as never as TFormData\n\n    const onServerError = (await runValidator({\n      value: data,\n      validationSource: 'form',\n    })) as UnwrapFormAsyncValidateOrFn<TOnServer> | undefined\n\n    if (!onServerError) return\n\n    const onServerErrorVal = (\n      isGlobalFormValidationError(onServerError)\n        ? onServerError.form\n        : onServerError\n    ) as UnwrapFormAsyncValidateOrFn<TOnServer>\n\n    const formState: ServerFormState<TFormData, TOnServer> = {\n      errorMap: {\n        onServer: onServerError,\n      },\n      values: data,\n      errors: onServerErrorVal ? [onServerErrorVal] : [],\n    }\n\n    const cookie = await _tanstackInternalsCookie.serialize(formState)\n\n    throw new ServerValidateError({\n      response: new Response('ok', {\n        headers: {\n          Location: referer,\n          'Set-Cookie': cookie,\n        },\n        status: 302,\n      }),\n      formState: formState,\n    })\n  }\n"],"names":["isStandardSchemaValidator","standardSchemaValidators","getHeader","decode","isGlobalFormValidationError","_tanstackInternalsCookie","ServerValidateError"],"mappings":";;;;;;;AA4CO,MAAM,uBACX,CAYE,gBAaF,OAAO,UAAoB,SAAwC;AAC3D,QAAA,EAAE,qBAAqB;AAE7B,QAAM,eAAe,OAAO;AAAA,IAC1B;AAAA,IACA;AAAA,EAAA,MAII;AACA,QAAAA,SAAAA,0BAA0B,gBAAgB,GAAG;AAC/C,aAAO,MAAMC,SAAyB,yBAAA;AAAA,QACpC,EAAE,OAAO,iBAAiB;AAAA,QAC1B;AAAA,MACF;AAAA,IAAA;AAEF,WAAQ,iBAAoD;AAAA,MAC1D;AAAA,MACA,QAAQ;AAAA,MACR,SAAS;AAAA,IAAA,CACV;AAAA,EACH;AAEM,QAAA,UAAUC,iBAAU,SAAS;AAE7B,QAAA,OAAOC,eAAAA,OAAO,UAAU,IAAI;AAE5B,QAAA,gBAAiB,MAAM,aAAa;AAAA,IACxC,OAAO;AAAA,IACP,kBAAkB;AAAA,EAAA,CACnB;AAED,MAAI,CAAC,cAAe;AAEpB,QAAM,mBACJC,SAAAA,4BAA4B,aAAa,IACrC,cAAc,OACd;AAGN,QAAM,YAAmD;AAAA,IACvD,UAAU;AAAA,MACR,UAAU;AAAA,IACZ;AAAA,IACA,QAAQ;AAAA,IACR,QAAQ,mBAAmB,CAAC,gBAAgB,IAAI,CAAA;AAAA,EAClD;AAEA,QAAM,SAAS,MAAMC,+BAAyB,UAAU,SAAS;AAEjE,QAAM,IAAIC,MAAAA,oBAAoB;AAAA,IAC5B,UAAU,IAAI,SAAS,MAAM;AAAA,MAC3B,SAAS;AAAA,QACP,UAAU;AAAA,QACV,cAAc;AAAA,MAChB;AAAA,MACA,QAAQ;AAAA,IAAA,CACT;AAAA,IACD;AAAA,EAAA,CACD;AACH;;"}